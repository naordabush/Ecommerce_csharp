// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using lezioniEcommerce.API.Controllers.DataModel;

#nullable disable

namespace lezioniEcommerce.API.Migrations
{
    [DbContext(typeof(DB_ECOMMERCEContext))]
    [Migration("20240328150518_define_many_to_many")]
    partial class define_many_to_many
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("lezioniEcommerce.API.Controllers.DataModel.BRANDS", b =>
                {
                    b.Property<int>("BRAND_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BRAND_ID"));

                    b.Property<string>("BRAND_NAME")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BRAND_ID");

                    b.ToTable("BRANDS");
                });

            modelBuilder.Entity("lezioniEcommerce.API.Controllers.DataModel.CARTS", b =>
                {
                    b.Property<int>("CART_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CART_ID"));

                    b.Property<int>("USER_ID")
                        .HasColumnType("int");

                    b.HasKey("CART_ID");

                    b.HasIndex("USER_ID");

                    b.ToTable("CARTS");
                });

            modelBuilder.Entity("lezioniEcommerce.API.Controllers.DataModel.PRODUCTS", b =>
                {
                    b.Property<int>("PRODUCT_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PRODUCT_ID"));

                    b.Property<int>("BRAND_ID")
                        .HasColumnType("int");

                    b.Property<string>("PRODUCT_DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PRODUCT_ISACTIVE")
                        .HasColumnType("bit");

                    b.Property<string>("PRODUCT_NAME")
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PRODUCT_PRICE")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("PRODUCT_ID");

                    b.HasIndex("BRAND_ID");

                    b.ToTable("PRODUCTS");
                });

            modelBuilder.Entity("lezioniEcommerce.API.Controllers.DataModel.USERS", b =>
                {
                    b.Property<int>("USER_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("USER_ID"));

                    b.Property<string>("USER_EMAIL")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("USER_FIRSTNAME")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("USER_LASTNAME")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("USER_PASSWORD")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("USER_USERNAME")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("USER_ID");

                    b.ToTable("USERS");
                });

            modelBuilder.Entity("lezioniEcommerce.API.DataModel.CART_ITEMS", b =>
                {
                    b.Property<int>("CART_ITEM_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CART_ITEM_ID"));

                    b.Property<int>("CART_ID")
                        .HasColumnType("int");

                    b.Property<int>("CART_QUANTITY")
                        .HasColumnType("int");

                    b.Property<int>("PRODUCT_ID")
                        .HasColumnType("int");

                    b.HasKey("CART_ITEM_ID");

                    b.HasIndex("CART_ID");

                    b.HasIndex("PRODUCT_ID");

                    b.ToTable("CART_ITEMS");
                });

            modelBuilder.Entity("lezioniEcommerce.API.DataModel.CATEGORIES", b =>
                {
                    b.Property<int>("CATEGORY_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CATEGORY_ID"));

                    b.Property<string>("CATEGORY_NAME")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CATEGORY_ID");

                    b.ToTable("CATEGORIES");
                });

            modelBuilder.Entity("lezioniEcommerce.API.DataModel.PRODUCTS_CATEGORIES", b =>
                {
                    b.Property<int>("PRODUCT_ID")
                        .HasColumnType("int");

                    b.Property<int>("CATEGORY_ID")
                        .HasColumnType("int");

                    b.HasKey("PRODUCT_ID", "CATEGORY_ID");

                    b.HasIndex("CATEGORY_ID");

                    b.ToTable("PRODUCTS_CATEGORIES");
                });

            modelBuilder.Entity("lezioniEcommerce.API.Controllers.DataModel.CARTS", b =>
                {
                    b.HasOne("lezioniEcommerce.API.Controllers.DataModel.USERS", "USER")
                        .WithMany()
                        .HasForeignKey("USER_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("USER");
                });

            modelBuilder.Entity("lezioniEcommerce.API.Controllers.DataModel.PRODUCTS", b =>
                {
                    b.HasOne("lezioniEcommerce.API.Controllers.DataModel.BRANDS", "BRAND")
                        .WithMany()
                        .HasForeignKey("BRAND_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BRAND");
                });

            modelBuilder.Entity("lezioniEcommerce.API.DataModel.CART_ITEMS", b =>
                {
                    b.HasOne("lezioniEcommerce.API.Controllers.DataModel.CARTS", "CART")
                        .WithMany()
                        .HasForeignKey("CART_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lezioniEcommerce.API.Controllers.DataModel.PRODUCTS", "PRODUCT")
                        .WithMany()
                        .HasForeignKey("PRODUCT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CART");

                    b.Navigation("PRODUCT");
                });

            modelBuilder.Entity("lezioniEcommerce.API.DataModel.PRODUCTS_CATEGORIES", b =>
                {
                    b.HasOne("lezioniEcommerce.API.DataModel.CATEGORIES", "Category")
                        .WithMany("ProductsCategories")
                        .HasForeignKey("CATEGORY_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lezioniEcommerce.API.Controllers.DataModel.PRODUCTS", "Product")
                        .WithMany("ProductsCategories")
                        .HasForeignKey("PRODUCT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("lezioniEcommerce.API.Controllers.DataModel.PRODUCTS", b =>
                {
                    b.Navigation("ProductsCategories");
                });

            modelBuilder.Entity("lezioniEcommerce.API.DataModel.CATEGORIES", b =>
                {
                    b.Navigation("ProductsCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
